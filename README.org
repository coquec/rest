* rest.el

** What is it?

rest.el is an Emacs package with elisp functions to call REST API endpoints.
It is meant as a ground for building elisp proxies to REST APIs, currently only
by hand, but (hopefully) in the future by reading OpenAPI JSON API
descriptions.

** How to use it

The functions use the [[https://melpa.org/#/request][request.el]] package to make the HTTP calls.  Most of the
parameters used by the different functions have the same meaning in both
packages.

*** Calling a REST endpoint

The library provides functions to call the endpoints, and some simple functions
to render the results in buffers.  In this example, we call an endpoint and
render the result in a buffer as plain text (which is the default):

#+NAME: Simple REST endpoint call, showing results as RAW text.
#+BEGIN_SRC emacs-lisp :results output none
  (rest-call :type "GET"
             :endpoint "https://api.restful-api.dev/objects")
#+END_SRC

The previous call is non-blocking, so we can continue working with Emacs while
it is processed.  The buffer with the results will appear when the answer is
sent by the API, or a message will be displayed if an HTTP error is received.

This is the same example, but rendering the results as JSON:

#+NAME: Simple REST endpoint call, showing JSON results.
#+BEGIN_SRC emacs-lisp :results output none
  (rest-call :type "GET"
             :endpoint "https://api.restful-api.dev/objects"
             :success #'rest-json-to-buffer)
#+END_SRC

We can use our own functions to process the results.  In this example we
provide to ~rest-call~ a customized function to process the returned JSON,
showing a message with some information about the returned objects:

#+NAME: Process the JSON returned from the API.
#+BEGIN_SRC emacs-lisp :results output none
  (rest-call :type "GET"
             :endpoint "https://api.restful-api.dev/objects"
             :success
             (cl-function
              (lambda (&key
                       data
                       &allow-other-keys)
                (let ((json (json-parse-string data :array-type 'list)))
                  (message "%d items were returned. The last one was \"%s\"."
                           (length json)
                           (gethash "name" (car (reverse json))))))))
#+END_SRC

*** Parallel calls

It is possible to execute several calls in parallel using the
~rest-multiple-calls~ function:

#+NAME: Parallel endpoint calls.
#+BEGIN_SRC emacs-lisp :results output none
  (rest-multiple-calls
   :parameters
   '((:type "GET" :endpoint "https://api.restful-api.dev/objects/1")
     (:type "GET" :endpoint "https://api.restful-api.dev/objects/2")))
#+END_SRC

As both endpoints in the last example use the GET method, we could have used
this simpler version to do the same.  In addition, we use the
~rest-multiple-json-to-buffer~ function to format the output, opening a buffer
for each JSON result provided by the API:

#+NAME: Parallel calls sharing the same GET method and format results as JSON.
#+BEGIN_SRC emacs-lisp :results output none
  (rest-multiple-calls
   :type "GET"
   :success #'rest-multiple-json-to-buffer
   :parameters
   '((:endpoint "https://api.restful-api.dev/objects/1")
     (:endpoint "https://api.restful-api.dev/objects/2")))
#+END_SRC

The ~rest-call~ function returns a list with most of the parameters used to
call it in elisp.  When invoked with a non-nil ~dry-run~ parameter, it does not
make the REST call.  This can be used to aggregate several calls to be executed
in parallel with ~rest-multiple-calls~, as shown here:

#+NAME: Parallel endpoint calls with parameters used for single calls.
#+BEGIN_SRC emacs-lisp :results output none
  (rest-multiple-calls
     :parameters
     (list
      (rest-call :dry-run t
                 :type "GET"
                 :endpoint "https://api.restful-api.dev/objects/1")
      (rest-call :dry-run t
                 :type "GET"
                 :endpoint "https://api.restful-api.dev/objects/2")))
#+END_SRC

This is particularly useful for elisp API proxy functions:

#+NAME: Make parallel calls of funcions using rest-api.
#+BEGIN_SRC emacs-lisp :results output none
  ;; We don't know which parameters this functions use with rest-call...
  (cl-defun my-api-endpoint1 (&key
                              param1 param2 param3
                              (dry-run nil))
    (rest-call :type "GET"
               :endpoint (concat my-api-location "/endpoint1")
               :dry-run dry-run
               :auth-header (...)
               ...))

  (cl-defun my-api-endpoint2 (&key
                              param1
                              (dry-run nil))
    (rest-call :type "GET"
               :endpoint (concat my-api-location "/endpoint2")
               :dry-run dry-run
               :auth-header (...)
               ...))

  ;; ...but we can make those calls in parallel using :dry-run to get the
  ;; parameters.
  (rest-multiple-calls
   :parameters
   (list
    (my-api-endpoint1 :dry-run t :param1 1 :param2 2 :param3 3)
    (my-api-endpoint2 :dry-run t :param1 1)))
#+END_SRC
